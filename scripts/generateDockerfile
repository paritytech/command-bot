#!/bin/bash

set -u

RUSTUP_HOME=/usr/local/rustup
CARGO_HOME=/usr/local/cargo
PRE_COMMIT_BUILD_DEPS="gcc python3-dev libc-dev python3-pip"
RUST_BUILD_DEPS="curl ca-certificates"
ROCKSDB_BUILD_DEPS="build-essential python3"
# https://github.com/paritytech/substrate/search?q=x86_64-unknown-linux-gnu
SUBSTRATE_HOST=x86_64-unknown-linux-gnu
APT_INSTALL="apt install --assume-yes --quiet --no-install-recommends"
APP_DIR="/app"
NODE_USER="node"
BASE_IMAGE="docker.io/node:16.13.2-buster-slim"

IFS='' read -r -d '' common <<EOF
ENV DEBIAN_FRONTEND=noninteractive

RUN yarn --version

RUN apt update

# Git is needed for both pre-commit and also for cloning repositories before
# running the bot's commands
RUN $APT_INSTALL git && git --version
EOF

case "$1" in
  ci)
IFS='' read -r -d '' ci << EOF
FROM $BASE_IMAGE

$common

# CI pipeline utilities
# python3-* is needed for pre-commit
RUN $APT_INSTALL python3 make bash sed python3-distutils python3-pkg-resources

# Needed for pre-commit's installation
RUN $APT_INSTALL $PRE_COMMIT_BUILD_DEPS && apt-mark auto $PRE_COMMIT_BUILD_DEPS

RUN pip3 install pre-commit && pre-commit --version

RUN apt-get autoremove -y
EOF
    echo "$ci"
    ;;

  app)
IFS='' read -r -d '' app << EOF
FROM $BASE_IMAGE

# Those values are expected to be set from CI.
ARG REPO
ENV REPO=\$REPO
RUN if [ ! "\$REPO" ]; then exit 1; fi

$common

# for downloading shfmt
RUN $APT_INSTALL wget ca-certificates && apt-mark auto wget ca-certificates

# shfmt is needed for shell command parsing
RUN wget https://github.com/mvdan/sh/releases/download/v3.5.0/shfmt_v3.5.0_linux_amd64 -O /bin/shfmt && \
  echo "8feea043364a725dfb69665432aee9e85b84c7f801a70668650e8b15452f6574  /bin/shfmt" | sha256sum --check && \
  chmod +x /bin/shfmt && \
  shfmt --version

# Needed for building RocksDB bindings for Node.js
RUN $APT_INSTALL $ROCKSDB_BUILD_DEPS && apt-mark auto $ROCKSDB_BUILD_DEPS

RUN mkdir $APP_DIR && \
  chown $NODE_USER:$NODE_USER $APP_DIR && \
  cd "\$REPO" && \
  yarn --ignore-optional --immutable && \
  mv * $APP_DIR && \
  chown -R $NODE_USER:$NODE_USER $APP_DIR

RUN apt-get autoremove -y

WORKDIR $APP_DIR

RUN git config --global user.name command-bot && \
  git config --global user.email "<>"

CMD . $CARGO_HOME/env && yarn start
EOF
    echo "$app"
    ;;

  *)
    >&2 echo "Invalid argument '$1' for image name"
    exit 1
    ;;
esac
